# =============================================================================
# Disable cops that are enabled by default

# When this is enabled, all Rspec files generate offenses.
# We prefer the unparenthesized style.
Lint/AmbiguousBlockAssociation:
  Enabled: false

# This issue is rare, and in the case that it comes up there's generally a very
# specific reason to generate a loop in a particular way.
Lint/Loop:
  Enabled: false

# It's difficult to find a multi-line method invocation/definition that works
# in all instances.  Rubocop cannot make a distinction between methods with
# parentheses (normal) and methods without parentheses (e.g. Rails macros).
# These indent differently in VIM, and by convention.
#
# e.g. (as indented by VIM)
#
# has_many :wibbles,
#   through :waffles,
#   more: :stuff
#
# vs.
#
# do_something(foo,
#              bar,
#              wibble)
Layout/ArgumentAlignment:
  Enabled: false

  # This style works for multi-line methods calls:
  #
  # do_something(
  #   foo,
  #   bar,
  #   wibble: 1
  # )
  #
  # but not for multi-line method definitions:
  #
  # def do_something(
  #   a,
  #   b,
  #   foo:
  # )
  #
  #   method body...
  # end
  EnforcedStyle: with_fixed_indentation

# We prefer the compact style, but issues with Rails const loading sometimes
# require using the nested style.
Style/ClassAndModuleChildren:
  Enabled: false

# This seems to apply entirely to the Hash#has_key? and Hash#has_value? methods.
# The debate on deprecating these methods seems anything but resolved, and the
# latest Ruby documentation doesn't mention them as deprecated.  Given that
# English speakers seem to consistently prefer them over the alternatives (#key?
# and #value?), we'll hold onto them for now.
Style/PreferredHashMethods:
  Enabled: false

Style/Documentation:
  Description: 'Document classes and non-namespace modules.'
  Enabled: false

# #each_with_object and #inject have different roles; apples to oranges.
Style/EachWithObject:
  Description: 'Prefer `each_with_object` over `inject` or `reduce`.'
  Enabled: false

# Guard clauses produce multiple exit points from a function.  Extracting a
# method makes for cleaner method bodies.
Style/GuardClause:
  Description: 'Check for conditionals that can be replaced with guard clauses'
  StyleGuide: 'https://github.com/bbatsov/ruby-style-guide#no-nested-conditionals'
  Enabled: false

# Sometimes nested conditionals are conceptually orthogonal.  Reducing the
# nesting may be logically correct, but not make the logic easier to follow
# or reason about.
Style/IfInsideElse:
  Enabled: false

# Hands in the air, just don't care.
Style/MixinGrouping:
  Enabled: false

# Currently logged for incorrectly detecting mixin usage at top level, rubocop team is working on it.
Style/MixinUsage:
  Enabled: false

# Starting a (multi-line) conditional with 'unless' is confusing.
Style/NegatedIf:
  Description: >-
                 Favor unless over if for negative conditions
                 (or control flow or).
  StyleGuide: 'https://github.com/bbatsov/ruby-style-guide#unless-for-negatives'
  Enabled: false

# No one likes this style.
Style/Next:
  Enabled: false

# No one likes this style.
Style/PercentLiteralDelimiters:
  Enabled: false

# This cop is sending us mixed messages. We made recommended changes which triggers
# other linters about method chaining.
Style/SafeNavigation:
  Enabled: false

# Throwing an exception does not necessarily mean failure.
Style/SignalException:
  Description: 'Checks for proper usage of fail and raise.'
  StyleGuide: 'https://github.com/bbatsov/ruby-style-guide#fail-method'
  Enabled: false

# Specific, context-dependent method names can provide more clarity than
# general names.
Style/SingleLineBlockParams:
  Description: 'Enforces the names of some block params.'
  StyleGuide: 'https://github.com/bbatsov/ruby-style-guide#reduce-blocks'
  Enabled: false

# This is not 1986.
Layout/LineLength:
  Description: 'Limit lines to 80 characters.'
  StyleGuide: 'https://github.com/bbatsov/ruby-style-guide#80-character-limits'
  Enabled: false

# This prevents leaving space for required named parameters; e.g.:
# def foo(wibble: , wobble: nil)
Layout/SpaceBeforeComma:
  Enabled: false

# This prevents leaving space for required named parameters; e.g.:
# def foo(wibble: nil, wobble: )
Layout/SpaceInsideParens:
  Enabled: false

# This is a fine idea, but doesn't seem to work.  It complains about
# variables like `foo_bar1` as well as `foo_1`.
Naming/VariableNumber:
  Enabled: false

# Sometime we like to use 10_00 instead of 1_000 for money values.
# This makes it easier to see that this is 10 dollars instead of 1000
# pennies.
Style/NumericLiterals:
  Enabled: false

